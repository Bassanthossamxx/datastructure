#include <iostream>
using namespace std;

class Vector
{
private:
    int size = 0;
    int *vec;
    int cap;

    void extendedcapacity()
    {
        cap = cap * 2;
        int *vec2 = new int[cap];
        cout << "Capacity extended, the new capacity= " << cap << endl;
        for (int i = 0; i < size; i++)
        {
            vec2[i] = vec[i];
        }
        swap(vec, vec2);
        delete[] vec2;
    }

public:
    Vector(int s)
    {
        size = 0;
        cap = s + 10;
        vec = new int[cap];
    }

    int getsize()
    {
        return size;
    }

    int getfront()
    {
        int f = vec[0];
        return f;
    }

    int getback()
    {
        int b = vec[size - 1];
        return b;
    }

    void print()
    {
        for (int i = 0; i < size; i++)
        {
            cout << vec[i] << " ";
        }
        cout << endl;
    }

    void pushback(int x)
    {
        if (size == cap)
            extendedcapacity();
        vec[size++] = x;
    }

    int find(int x)
    {
        for (int i = 0; i < size; i++)
        {
            if (vec[i] == x)
                return 1;
        }
        return 0;
    }

    int set(int idx, int val)
    {
        if (idx >= 0 && idx < size)
            return vec[idx] = val;
        else
            return -1;
    }
    void rightroute()
    {
        // الكتابه بتكون من الشمال لليين في الانجلش علشان كده اخر رقم هواليمين
        int last = vec[size - 1];
        for (int i = size - 1; i > 0; i--)
        {
            // برجعه خطوه
            vec[i] = vec[i - 1];
        }
        vec[0] = last;
    }
    void leftroute()
    {
        int first = vec[0];
        for (int i = 1; i < size; i++)
        {
            // vec[i-1]==vec[i] بقدم خطوه
            vec[i - 1] = vec[i];
        }
        vec[size - 1] = first;
    }
    int pop(int in) // 1
    {
        int temp = vec[in]; // vec[1] =3 temp = 3
        if (in >= 0 && in < size)
        {
            // shift all data to left
            for (int i = in + 1; i < size; i++) // for(i=2;i<4;i++)
            {
                vec[i - 1] = vec[i]; // vec[1] = 2 vec[2] = 1 vec[3]will be removed
            }
            size--; // v[4] removed
        }
        return temp; // 3
    }
    int findtrap(int n)
    // at index 3-1 change it to index 2-1;
    // return the new index
    {
        for (int i = 0; i < size; i++)
        {
            if (vec[i] == n)
            {
                if (i == 0)
                {
                    return 0;
                }
                swap(vec[i], vec[i - 1]);
                return i - 1;
            }
        }
        return -1;
    }
    void routesteps(int step)
    {
        while (step--)
        {
            rightroute();
        }
    }
};

int main()
{
    Vector v1(5);
    v1.pushback(0);
    v1.pushback(1);
    v1.pushback(2);
    v1.pushback(3);
    v1.pushback(4);
    v1.print();
    v1.routesteps(2);
    v1.print();
    return 0;
}
